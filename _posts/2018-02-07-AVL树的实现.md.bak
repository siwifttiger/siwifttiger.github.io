---
layout:     post
title:      AVL树的实现
subtitle:   Mr.Alien Blog  AVL树的一种C++实现
date:       2018-02-07
author:     BY
header-img: img/post-bg-universe.jpg
catalog: true
tags:
    - 数据结构
---

## AVL树的实现

```
#pragma once
#include <algorithm>
#include <iostream>

// AvlTree class
//
// CONSTRUCTION: zero parameter
//
// ******************PUBLIC OPERATIONS*********************
// void insert( x )       --> Insert x
// void remove( x )       --> Remove x (unimplemented)
// bool contains( x )     --> Return true if x is present
// Comparable findMin( )  --> Return smallest item
// Comparable findMax( )  --> Return largest item
// boolean isEmpty( )     --> Return true if empty; else false
// void makeEmpty( )      --> Remove all items
// void printTree( )      --> Print tree in sorted order
// ******************ERRORS********************************


template<typename Comparable>
class AvlTree
{
public:
	AvlTree();
	AvlTree(const AvlTree&);
	AvlTree& operator=(const AvlTree&);
	AvlTree& operator=(AvlTree&&);
	AvlTree(AvlTree&& rhs);
	~AvlTree();
	void insert(const Comparable& x);
	void remove(const Comparable& x);
	bool contains(const Comparable& x);
	const Comparable findMin() const;
	const Comparable findMax() const;
	bool isEmpty() const;
	void makeEmpty();
	void printTree() const ;
private:
	struct AvlNode
	{
		Comparable ele;
		AvlNode* left;
		AvlNode* right;
		int height;
		AvlNode(const Comparable& element, AvlNode* lt, AvlNode* rt, int h = 0):
			ele(element), left(lt), right(rt), height(h){}
	};
	AvlNode* root;
	void insert(const Comparable& x, AvlNode*& t);
	void remove(const Comparable& x, AvlNode*& t);
	void removeMin(AvlNode*& t);
	bool contains(const Comparable& x, AvlNode* t);
	AvlNode* findMin(AvlNode*) const;
	AvlNode* findMax(AvlNode*) const;
	void printTree( AvlNode* t) const;
	void makeEmpty(AvlNode*&);
	void balance(AvlNode*& t);
	void rotateWithLeftChild(AvlNode*&);
	void rotateWithRightChild(AvlNode*&);
	int height(AvlNode* t) { return t == nullptr ? -1 : t->height; }
	int balance_factor(AvlNode*& t);
	AvlNode* clone(AvlNode* t) const;
};


template<typename Comparable>
AvlTree<Comparable>::AvlTree() : root(nullptr){}


//用于拷贝
template<typename Comparable>
typename AvlTree<Comparable>::AvlNode* AvlTree<Comparable>::clone(AvlNode* t) const
{
	if (t == nullptr)
		return nullptr;
	return new AvlNode(t->ele, clone(t->left), clone(t->right), t->height);
}

//拷贝构造函数
template<typename Comparable>
AvlTree<Comparable>::AvlTree(const AvlTree& rhs)
{
	root = clone(rhs.root);
}

//拷贝赋值运算符
template<typename Comparable>
typename AvlTree<Comparable>& AvlTree<Comparable>::operator=(const AvlTree& rhs)
{
	if (this != &rhs)
	{
		makeEmpty(root);
		root = clone(rhs.root);
	}
	return *this;
}

//移动构造函数
template<typename Comparable>
AvlTree<Comparable>::AvlTree(AvlTree&& rhs) : root(rhs.root)
{
	rhs.root = nullptr;
}

//移动赋值运算符
template<typename Comparable>
typename AvlTree<Comparable>& AvlTree<Comparable>::operator=(AvlTree&& rhs)
{
	std::swap(root, rhs.root);
	return *this;
}

template<typename Comparable>
AvlTree<Comparable>::~AvlTree()
{
	makeEmpty(root);
}

//包含
template<typename Comparable>
bool AvlTree<Comparable>::contains(const Comparable& x)
{
	return contains(x, root);
}
//包含
template<typename Comparable>
bool AvlTree<Comparable>::contains(const Comparable& x, AvlNode* t)
{
	if (!t)
		return false;
	if (x < t->ele)
		return contains(x, t->left);
	else if (t->ele < x)
		return contains(x, t->right);
	else
		return true;
}



//min max
template<typename Comparable>
const Comparable AvlTree<Comparable>::findMin() const
{
	return findMin(root)->ele;
}

//internal method
template<typename Comparable>
typename AvlTree<Comparable>::AvlNode* AvlTree<Comparable>::findMin(AvlNode* t) const
{
	if (t->left == nullptr) return t;
	return findMin(t->left);
}


//min max
template<typename Comparable>
const Comparable AvlTree<Comparable>::findMax() const
{
	return findMax(root)->ele;
}

//internal method
template<typename Comparable>
typename AvlTree<Comparable>::AvlNode* AvlTree<Comparable>::findMax(AvlNode* t) const
{
	if (t->right == nullptr) return t;
	return findMax(t->right);
}

//public interface to insert an element
template<typename Comparable>
void AvlTree<Comparable>::insert(const Comparable& x)
{
	insert(x, root);
}

template<typename Comparable>
void AvlTree<Comparable>::insert(const Comparable& x, AvlNode*& t)
{
	if (t == nullptr) t = new AvlNode(x, nullptr, nullptr);
	else if (x < t->ele) insert(x, t->left);
	else if (t->ele < x) insert(x, t->right);
	else
		;
	t->height = std::max(height(t->left), height(t->right)) + 1;
	balance(t);
}


//public interface for remove
template<typename Comparable>
void AvlTree<Comparable>::remove(const Comparable& x)
{
	remove(x, root);
}

//internal method for removeMin
template<typename Comparable>
void AvlTree<Comparable>::removeMin(AvlNode*& t)
{
	AvlNode* parent = t;
	AvlNode* min = t->right;
	while (min->left != nullptr)
	{
		parent = min;
		min = min->left;
	}
	//交换值
	t->ele = min->ele;
	if (parent->left == min)
	{
		parent->left = min->right;
	}
	else
	{
		parent->right = min->right;
	}
	delete min;
}


//internal method 
template<typename Comparable>
void AvlTree<Comparable>::remove(const Comparable& x, AvlNode*& t)
{
	//空节点，啥都不做（没找到）
	if (t == nullptr)
		return;
	if (x < t->ele)
		remove(x,t->left);
	else if (t->ele < x)
		remove(x,t->right);
	else if (t->left != nullptr && t->right != nullptr)
	{
		removeMin(t);
	}
	else
	{
		AvlNode* key = t;
		t = (t->left != nullptr ? t->left : t->right);
		delete key;
	}
	balance(t);
}

//internal method to balance a node
template<typename Comparable>
void AvlTree<Comparable>::rotateWithLeftChild(AvlNode*& t)
{
	AvlNode* k = t->left;
	t->left = k->right;
	k->right = t;
	//改变高度
	t->height = std::max(height(t->left),height(t->right))+1;
	k->height = std::max(height(k->left),t->height) + 1;
	t = k;
}

//rightchildrotate
template<typename Comparable>
void AvlTree<Comparable>::rotateWithRightChild(AvlNode*& t)
{
	AvlNode* k = t->right;
	t->right = k->left;
	k->left = t;
	//改变高度;
	t->height = std::max(height(t->left), height(t->right)) + 1;
	k->height = std::max(height(k->left), t->height) + 1;
	t = k;
}


//计算平衡因子
template<typename Comparable>
int AvlTree<Comparable>::balance_factor(AvlNode*& t)
{
	if (t == nullptr)
		return 0;
	return height(t->left) - height(t->right);
}

//平衡操作
template<typename Comparable>
void AvlTree<Comparable>::balance(AvlNode*& t)
{
	//四种旋转
	if (balance_factor(t) == 2)
	{
		if (balance_factor(t->left) < 0)
		{
			rotateWithRightChild(t->left);
		}
		rotateWithLeftChild(t);
	}
	else if (balance_factor(t) == -2)
	{
		if (balance_factor(t->right) > 0)
		{
			rotateWithLeftChild(t->right);
		}
		rotateWithRightChild(t);
	}
}

//makeempty
template<typename Comparable>
void AvlTree<Comparable>::makeEmpty()
{
	makeEmpty(root);
}

template<typename Comparable>
void AvlTree<Comparable>::makeEmpty(AvlNode*& t)
{
	if (t != nullptr)
	{
		makeEmpty(t->left);
		makeEmpty(t->right);
		delete t;
	}
	t = nullptr;
}

//isEmpty
template<typename Comparable>
bool AvlTree<Comparable>::isEmpty() const
{
	return root == nullptr;
}

//printTree
template<typename Comparable>
void AvlTree<Comparable>::printTree() const
{
	printTree(root);
}

//printTree
template<typename Comparable>
void AvlTree<Comparable>::printTree( AvlNode* t) const
{
	if (t != nullptr)
	{
		printTree(t->left);
		std::cout << t->ele << ",";
		printTree(t->right);
	}
}

```